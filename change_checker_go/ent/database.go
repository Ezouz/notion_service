// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"gitlab.42paris.fr/notion_service/ent/database"
)

// Database is the model entity for the Database schema.
type Database struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatusID holds the value of the "status_id" field.
	StatusID *int `json:"status_id,omitempty"`
	// TagsID holds the value of the "tags_id" field.
	TagsID *int `json:"tags_id,omitempty"`
	// CheckboxID holds the value of the "checkbox_id" field.
	CheckboxID *int `json:"checkbox_id,omitempty"`
	// DbID holds the value of the "db_id" field.
	DbID string `json:"db_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatabaseQuery when eager-loading is set.
	Edges DatabaseEdges `json:"edges"`
}

// DatabaseEdges holds the relations/edges for other nodes in the graph.
type DatabaseEdges struct {
	// Status holds the value of the status edge.
	Status []*Status `json:"status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading.
func (e DatabaseEdges) StatusOrErr() ([]*Status, error) {
	if e.loadedTypes[0] {
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Database) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case database.FieldID, database.FieldStatusID, database.FieldTagsID, database.FieldCheckboxID:
			values[i] = new(sql.NullInt64)
		case database.FieldDbID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Database", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Database fields.
func (d *Database) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case database.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case database.FieldStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_id", values[i])
			} else if value.Valid {
				d.StatusID = new(int)
				*d.StatusID = int(value.Int64)
			}
		case database.FieldTagsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tags_id", values[i])
			} else if value.Valid {
				d.TagsID = new(int)
				*d.TagsID = int(value.Int64)
			}
		case database.FieldCheckboxID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field checkbox_id", values[i])
			} else if value.Valid {
				d.CheckboxID = new(int)
				*d.CheckboxID = int(value.Int64)
			}
		case database.FieldDbID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field db_id", values[i])
			} else if value.Valid {
				d.DbID = value.String
			}
		}
	}
	return nil
}

// QueryStatus queries the "status" edge of the Database entity.
func (d *Database) QueryStatus() *StatusQuery {
	return (&DatabaseClient{config: d.config}).QueryStatus(d)
}

// Update returns a builder for updating this Database.
// Note that you need to call Database.Unwrap() before calling this method if this Database
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Database) Update() *DatabaseUpdateOne {
	return (&DatabaseClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Database entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Database) Unwrap() *Database {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Database is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Database) String() string {
	var builder strings.Builder
	builder.WriteString("Database(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	if v := d.StatusID; v != nil {
		builder.WriteString("status_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.TagsID; v != nil {
		builder.WriteString("tags_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.CheckboxID; v != nil {
		builder.WriteString("checkbox_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("db_id=")
	builder.WriteString(d.DbID)
	builder.WriteByte(')')
	return builder.String()
}

// Databases is a parsable slice of Database.
type Databases []*Database

func (d Databases) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
