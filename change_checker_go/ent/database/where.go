// Code generated by ent, DO NOT EDIT.

package database

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.42paris.fr/utilities/notion_service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StatusID applies equality check predicate on the "status_id" field. It's identical to StatusIDEQ.
func StatusID(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// TagsID applies equality check predicate on the "tags_id" field. It's identical to TagsIDEQ.
func TagsID(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTagsID), v))
	})
}

// CheckboxID applies equality check predicate on the "checkbox_id" field. It's identical to CheckboxIDEQ.
func CheckboxID(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckboxID), v))
	})
}

// DbID applies equality check predicate on the "db_id" field. It's identical to DbIDEQ.
func DbID(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDbID), v))
	})
}

// StatusIDEQ applies the EQ predicate on the "status_id" field.
func StatusIDEQ(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusID), v))
	})
}

// StatusIDNEQ applies the NEQ predicate on the "status_id" field.
func StatusIDNEQ(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusID), v))
	})
}

// StatusIDIn applies the In predicate on the "status_id" field.
func StatusIDIn(vs ...int) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatusID), v...))
	})
}

// StatusIDNotIn applies the NotIn predicate on the "status_id" field.
func StatusIDNotIn(vs ...int) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatusID), v...))
	})
}

// StatusIDGT applies the GT predicate on the "status_id" field.
func StatusIDGT(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusID), v))
	})
}

// StatusIDGTE applies the GTE predicate on the "status_id" field.
func StatusIDGTE(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusID), v))
	})
}

// StatusIDLT applies the LT predicate on the "status_id" field.
func StatusIDLT(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusID), v))
	})
}

// StatusIDLTE applies the LTE predicate on the "status_id" field.
func StatusIDLTE(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusID), v))
	})
}

// TagsIDEQ applies the EQ predicate on the "tags_id" field.
func TagsIDEQ(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTagsID), v))
	})
}

// TagsIDNEQ applies the NEQ predicate on the "tags_id" field.
func TagsIDNEQ(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTagsID), v))
	})
}

// TagsIDIn applies the In predicate on the "tags_id" field.
func TagsIDIn(vs ...int) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTagsID), v...))
	})
}

// TagsIDNotIn applies the NotIn predicate on the "tags_id" field.
func TagsIDNotIn(vs ...int) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTagsID), v...))
	})
}

// TagsIDGT applies the GT predicate on the "tags_id" field.
func TagsIDGT(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTagsID), v))
	})
}

// TagsIDGTE applies the GTE predicate on the "tags_id" field.
func TagsIDGTE(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTagsID), v))
	})
}

// TagsIDLT applies the LT predicate on the "tags_id" field.
func TagsIDLT(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTagsID), v))
	})
}

// TagsIDLTE applies the LTE predicate on the "tags_id" field.
func TagsIDLTE(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTagsID), v))
	})
}

// CheckboxIDEQ applies the EQ predicate on the "checkbox_id" field.
func CheckboxIDEQ(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCheckboxID), v))
	})
}

// CheckboxIDNEQ applies the NEQ predicate on the "checkbox_id" field.
func CheckboxIDNEQ(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCheckboxID), v))
	})
}

// CheckboxIDIn applies the In predicate on the "checkbox_id" field.
func CheckboxIDIn(vs ...int) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCheckboxID), v...))
	})
}

// CheckboxIDNotIn applies the NotIn predicate on the "checkbox_id" field.
func CheckboxIDNotIn(vs ...int) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCheckboxID), v...))
	})
}

// CheckboxIDGT applies the GT predicate on the "checkbox_id" field.
func CheckboxIDGT(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCheckboxID), v))
	})
}

// CheckboxIDGTE applies the GTE predicate on the "checkbox_id" field.
func CheckboxIDGTE(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCheckboxID), v))
	})
}

// CheckboxIDLT applies the LT predicate on the "checkbox_id" field.
func CheckboxIDLT(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCheckboxID), v))
	})
}

// CheckboxIDLTE applies the LTE predicate on the "checkbox_id" field.
func CheckboxIDLTE(v int) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCheckboxID), v))
	})
}

// DbIDEQ applies the EQ predicate on the "db_id" field.
func DbIDEQ(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDbID), v))
	})
}

// DbIDNEQ applies the NEQ predicate on the "db_id" field.
func DbIDNEQ(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDbID), v))
	})
}

// DbIDIn applies the In predicate on the "db_id" field.
func DbIDIn(vs ...string) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDbID), v...))
	})
}

// DbIDNotIn applies the NotIn predicate on the "db_id" field.
func DbIDNotIn(vs ...string) predicate.Database {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDbID), v...))
	})
}

// DbIDGT applies the GT predicate on the "db_id" field.
func DbIDGT(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDbID), v))
	})
}

// DbIDGTE applies the GTE predicate on the "db_id" field.
func DbIDGTE(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDbID), v))
	})
}

// DbIDLT applies the LT predicate on the "db_id" field.
func DbIDLT(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDbID), v))
	})
}

// DbIDLTE applies the LTE predicate on the "db_id" field.
func DbIDLTE(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDbID), v))
	})
}

// DbIDContains applies the Contains predicate on the "db_id" field.
func DbIDContains(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDbID), v))
	})
}

// DbIDHasPrefix applies the HasPrefix predicate on the "db_id" field.
func DbIDHasPrefix(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDbID), v))
	})
}

// DbIDHasSuffix applies the HasSuffix predicate on the "db_id" field.
func DbIDHasSuffix(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDbID), v))
	})
}

// DbIDEqualFold applies the EqualFold predicate on the "db_id" field.
func DbIDEqualFold(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDbID), v))
	})
}

// DbIDContainsFold applies the ContainsFold predicate on the "db_id" field.
func DbIDContainsFold(v string) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDbID), v))
	})
}

// HasStatus applies the HasEdge predicate on the "status" edge.
func HasStatus() predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusWith applies the HasEdge predicate on the "status" edge with a given conditions (other predicates).
func HasStatusWith(preds ...predicate.Status) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatusTable, StatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Database) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Database) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Database) predicate.Database {
	return predicate.Database(func(s *sql.Selector) {
		p(s.Not())
	})
}
