// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.42paris.fr/utilities/notion_service/ent/database"
	"gitlab.42paris.fr/utilities/notion_service/ent/status"
)

// DatabaseCreate is the builder for creating a Database entity.
type DatabaseCreate struct {
	config
	mutation *DatabaseMutation
	hooks    []Hook
}

// SetStatusID sets the "status_id" field.
func (dc *DatabaseCreate) SetStatusID(i int) *DatabaseCreate {
	dc.mutation.SetStatusID(i)
	return dc
}

// SetTagsID sets the "tags_id" field.
func (dc *DatabaseCreate) SetTagsID(i int) *DatabaseCreate {
	dc.mutation.SetTagsID(i)
	return dc
}

// SetCheckboxID sets the "checkbox_id" field.
func (dc *DatabaseCreate) SetCheckboxID(i int) *DatabaseCreate {
	dc.mutation.SetCheckboxID(i)
	return dc
}

// SetDbID sets the "db_id" field.
func (dc *DatabaseCreate) SetDbID(s string) *DatabaseCreate {
	dc.mutation.SetDbID(s)
	return dc
}

// SetID sets the "id" field.
func (dc *DatabaseCreate) SetID(i int) *DatabaseCreate {
	dc.mutation.SetID(i)
	return dc
}

// AddStatuIDs adds the "status" edge to the Status entity by IDs.
func (dc *DatabaseCreate) AddStatuIDs(ids ...int) *DatabaseCreate {
	dc.mutation.AddStatuIDs(ids...)
	return dc
}

// AddStatus adds the "status" edges to the Status entity.
func (dc *DatabaseCreate) AddStatus(s ...*Status) *DatabaseCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dc.AddStatuIDs(ids...)
}

// Mutation returns the DatabaseMutation object of the builder.
func (dc *DatabaseCreate) Mutation() *DatabaseMutation {
	return dc.mutation
}

// Save creates the Database in the database.
func (dc *DatabaseCreate) Save(ctx context.Context) (*Database, error) {
	var (
		err  error
		node *Database
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatabaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Database)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DatabaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DatabaseCreate) SaveX(ctx context.Context) *Database {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DatabaseCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DatabaseCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DatabaseCreate) check() error {
	if _, ok := dc.mutation.StatusID(); !ok {
		return &ValidationError{Name: "status_id", err: errors.New(`ent: missing required field "Database.status_id"`)}
	}
	if _, ok := dc.mutation.TagsID(); !ok {
		return &ValidationError{Name: "tags_id", err: errors.New(`ent: missing required field "Database.tags_id"`)}
	}
	if _, ok := dc.mutation.CheckboxID(); !ok {
		return &ValidationError{Name: "checkbox_id", err: errors.New(`ent: missing required field "Database.checkbox_id"`)}
	}
	if _, ok := dc.mutation.DbID(); !ok {
		return &ValidationError{Name: "db_id", err: errors.New(`ent: missing required field "Database.db_id"`)}
	}
	if v, ok := dc.mutation.DbID(); ok {
		if err := database.DbIDValidator(v); err != nil {
			return &ValidationError{Name: "db_id", err: fmt.Errorf(`ent: validator failed for field "Database.db_id": %w`, err)}
		}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := database.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Database.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DatabaseCreate) sqlSave(ctx context.Context) (*Database, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (dc *DatabaseCreate) createSpec() (*Database, *sqlgraph.CreateSpec) {
	var (
		_node = &Database{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: database.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: database.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.StatusID(); ok {
		_spec.SetField(database.FieldStatusID, field.TypeInt, value)
		_node.StatusID = &value
	}
	if value, ok := dc.mutation.TagsID(); ok {
		_spec.SetField(database.FieldTagsID, field.TypeInt, value)
		_node.TagsID = &value
	}
	if value, ok := dc.mutation.CheckboxID(); ok {
		_spec.SetField(database.FieldCheckboxID, field.TypeInt, value)
		_node.CheckboxID = &value
	}
	if value, ok := dc.mutation.DbID(); ok {
		_spec.SetField(database.FieldDbID, field.TypeString, value)
		_node.DbID = value
	}
	if nodes := dc.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DatabaseCreateBulk is the builder for creating many Database entities in bulk.
type DatabaseCreateBulk struct {
	config
	builders []*DatabaseCreate
}

// Save creates the Database entities in the database.
func (dcb *DatabaseCreateBulk) Save(ctx context.Context) ([]*Database, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Database, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatabaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DatabaseCreateBulk) SaveX(ctx context.Context) []*Database {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DatabaseCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DatabaseCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
