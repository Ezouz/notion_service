// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.42paris.fr/utilities/notion_service/ent/database"
	"gitlab.42paris.fr/utilities/notion_service/ent/predicate"
	"gitlab.42paris.fr/utilities/notion_service/ent/status"
)

// DatabaseUpdate is the builder for updating Database entities.
type DatabaseUpdate struct {
	config
	hooks    []Hook
	mutation *DatabaseMutation
}

// Where appends a list predicates to the DatabaseUpdate builder.
func (du *DatabaseUpdate) Where(ps ...predicate.Database) *DatabaseUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetStatusID sets the "status_id" field.
func (du *DatabaseUpdate) SetStatusID(i int) *DatabaseUpdate {
	du.mutation.ResetStatusID()
	du.mutation.SetStatusID(i)
	return du
}

// AddStatusID adds i to the "status_id" field.
func (du *DatabaseUpdate) AddStatusID(i int) *DatabaseUpdate {
	du.mutation.AddStatusID(i)
	return du
}

// SetTagsID sets the "tags_id" field.
func (du *DatabaseUpdate) SetTagsID(i int) *DatabaseUpdate {
	du.mutation.ResetTagsID()
	du.mutation.SetTagsID(i)
	return du
}

// AddTagsID adds i to the "tags_id" field.
func (du *DatabaseUpdate) AddTagsID(i int) *DatabaseUpdate {
	du.mutation.AddTagsID(i)
	return du
}

// SetCheckboxID sets the "checkbox_id" field.
func (du *DatabaseUpdate) SetCheckboxID(i int) *DatabaseUpdate {
	du.mutation.ResetCheckboxID()
	du.mutation.SetCheckboxID(i)
	return du
}

// AddCheckboxID adds i to the "checkbox_id" field.
func (du *DatabaseUpdate) AddCheckboxID(i int) *DatabaseUpdate {
	du.mutation.AddCheckboxID(i)
	return du
}

// SetDbID sets the "db_id" field.
func (du *DatabaseUpdate) SetDbID(s string) *DatabaseUpdate {
	du.mutation.SetDbID(s)
	return du
}

// AddStatuIDs adds the "status" edge to the Status entity by IDs.
func (du *DatabaseUpdate) AddStatuIDs(ids ...int) *DatabaseUpdate {
	du.mutation.AddStatuIDs(ids...)
	return du
}

// AddStatus adds the "status" edges to the Status entity.
func (du *DatabaseUpdate) AddStatus(s ...*Status) *DatabaseUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.AddStatuIDs(ids...)
}

// Mutation returns the DatabaseMutation object of the builder.
func (du *DatabaseUpdate) Mutation() *DatabaseMutation {
	return du.mutation
}

// ClearStatus clears all "status" edges to the Status entity.
func (du *DatabaseUpdate) ClearStatus() *DatabaseUpdate {
	du.mutation.ClearStatus()
	return du
}

// RemoveStatuIDs removes the "status" edge to Status entities by IDs.
func (du *DatabaseUpdate) RemoveStatuIDs(ids ...int) *DatabaseUpdate {
	du.mutation.RemoveStatuIDs(ids...)
	return du
}

// RemoveStatus removes "status" edges to Status entities.
func (du *DatabaseUpdate) RemoveStatus(s ...*Status) *DatabaseUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return du.RemoveStatuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatabaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatabaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatabaseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatabaseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatabaseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DatabaseUpdate) check() error {
	if v, ok := du.mutation.DbID(); ok {
		if err := database.DbIDValidator(v); err != nil {
			return &ValidationError{Name: "db_id", err: fmt.Errorf(`ent: validator failed for field "Database.db_id": %w`, err)}
		}
	}
	return nil
}

func (du *DatabaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   database.Table,
			Columns: database.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: database.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.StatusID(); ok {
		_spec.SetField(database.FieldStatusID, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedStatusID(); ok {
		_spec.AddField(database.FieldStatusID, field.TypeInt, value)
	}
	if value, ok := du.mutation.TagsID(); ok {
		_spec.SetField(database.FieldTagsID, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedTagsID(); ok {
		_spec.AddField(database.FieldTagsID, field.TypeInt, value)
	}
	if value, ok := du.mutation.CheckboxID(); ok {
		_spec.SetField(database.FieldCheckboxID, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedCheckboxID(); ok {
		_spec.AddField(database.FieldCheckboxID, field.TypeInt, value)
	}
	if value, ok := du.mutation.DbID(); ok {
		_spec.SetField(database.FieldDbID, field.TypeString, value)
	}
	if du.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedStatusIDs(); len(nodes) > 0 && !du.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{database.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DatabaseUpdateOne is the builder for updating a single Database entity.
type DatabaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DatabaseMutation
}

// SetStatusID sets the "status_id" field.
func (duo *DatabaseUpdateOne) SetStatusID(i int) *DatabaseUpdateOne {
	duo.mutation.ResetStatusID()
	duo.mutation.SetStatusID(i)
	return duo
}

// AddStatusID adds i to the "status_id" field.
func (duo *DatabaseUpdateOne) AddStatusID(i int) *DatabaseUpdateOne {
	duo.mutation.AddStatusID(i)
	return duo
}

// SetTagsID sets the "tags_id" field.
func (duo *DatabaseUpdateOne) SetTagsID(i int) *DatabaseUpdateOne {
	duo.mutation.ResetTagsID()
	duo.mutation.SetTagsID(i)
	return duo
}

// AddTagsID adds i to the "tags_id" field.
func (duo *DatabaseUpdateOne) AddTagsID(i int) *DatabaseUpdateOne {
	duo.mutation.AddTagsID(i)
	return duo
}

// SetCheckboxID sets the "checkbox_id" field.
func (duo *DatabaseUpdateOne) SetCheckboxID(i int) *DatabaseUpdateOne {
	duo.mutation.ResetCheckboxID()
	duo.mutation.SetCheckboxID(i)
	return duo
}

// AddCheckboxID adds i to the "checkbox_id" field.
func (duo *DatabaseUpdateOne) AddCheckboxID(i int) *DatabaseUpdateOne {
	duo.mutation.AddCheckboxID(i)
	return duo
}

// SetDbID sets the "db_id" field.
func (duo *DatabaseUpdateOne) SetDbID(s string) *DatabaseUpdateOne {
	duo.mutation.SetDbID(s)
	return duo
}

// AddStatuIDs adds the "status" edge to the Status entity by IDs.
func (duo *DatabaseUpdateOne) AddStatuIDs(ids ...int) *DatabaseUpdateOne {
	duo.mutation.AddStatuIDs(ids...)
	return duo
}

// AddStatus adds the "status" edges to the Status entity.
func (duo *DatabaseUpdateOne) AddStatus(s ...*Status) *DatabaseUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.AddStatuIDs(ids...)
}

// Mutation returns the DatabaseMutation object of the builder.
func (duo *DatabaseUpdateOne) Mutation() *DatabaseMutation {
	return duo.mutation
}

// ClearStatus clears all "status" edges to the Status entity.
func (duo *DatabaseUpdateOne) ClearStatus() *DatabaseUpdateOne {
	duo.mutation.ClearStatus()
	return duo
}

// RemoveStatuIDs removes the "status" edge to Status entities by IDs.
func (duo *DatabaseUpdateOne) RemoveStatuIDs(ids ...int) *DatabaseUpdateOne {
	duo.mutation.RemoveStatuIDs(ids...)
	return duo
}

// RemoveStatus removes "status" edges to Status entities.
func (duo *DatabaseUpdateOne) RemoveStatus(s ...*Status) *DatabaseUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return duo.RemoveStatuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DatabaseUpdateOne) Select(field string, fields ...string) *DatabaseUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Database entity.
func (duo *DatabaseUpdateOne) Save(ctx context.Context) (*Database, error) {
	var (
		err  error
		node *Database
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatabaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Database)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DatabaseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatabaseUpdateOne) SaveX(ctx context.Context) *Database {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatabaseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatabaseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DatabaseUpdateOne) check() error {
	if v, ok := duo.mutation.DbID(); ok {
		if err := database.DbIDValidator(v); err != nil {
			return &ValidationError{Name: "db_id", err: fmt.Errorf(`ent: validator failed for field "Database.db_id": %w`, err)}
		}
	}
	return nil
}

func (duo *DatabaseUpdateOne) sqlSave(ctx context.Context) (_node *Database, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   database.Table,
			Columns: database.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: database.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Database.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, database.FieldID)
		for _, f := range fields {
			if !database.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != database.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.StatusID(); ok {
		_spec.SetField(database.FieldStatusID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedStatusID(); ok {
		_spec.AddField(database.FieldStatusID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.TagsID(); ok {
		_spec.SetField(database.FieldTagsID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedTagsID(); ok {
		_spec.AddField(database.FieldTagsID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.CheckboxID(); ok {
		_spec.SetField(database.FieldCheckboxID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedCheckboxID(); ok {
		_spec.AddField(database.FieldCheckboxID, field.TypeInt, value)
	}
	if value, ok := duo.mutation.DbID(); ok {
		_spec.SetField(database.FieldDbID, field.TypeString, value)
	}
	if duo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !duo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   database.StatusTable,
			Columns: []string{database.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Database{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{database.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
