// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"gitlab.42paris.fr/notion_service/ent/database"
	"gitlab.42paris.fr/notion_service/ent/predicate"
	"gitlab.42paris.fr/notion_service/ent/status"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDatabase = "Database"
	TypeStatus   = "Status"
)

// DatabaseMutation represents an operation that mutates the Database nodes in the graph.
type DatabaseMutation struct {
	config
	op             Op
	typ            string
	id             *int
	status_id      *int
	addstatus_id   *int
	tags_id        *int
	addtags_id     *int
	checkbox_id    *int
	addcheckbox_id *int
	db_id          *string
	clearedFields  map[string]struct{}
	status         map[int]struct{}
	removedstatus  map[int]struct{}
	clearedstatus  bool
	done           bool
	oldValue       func(context.Context) (*Database, error)
	predicates     []predicate.Database
}

var _ ent.Mutation = (*DatabaseMutation)(nil)

// databaseOption allows management of the mutation configuration using functional options.
type databaseOption func(*DatabaseMutation)

// newDatabaseMutation creates new mutation for the Database entity.
func newDatabaseMutation(c config, op Op, opts ...databaseOption) *DatabaseMutation {
	m := &DatabaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDatabase,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatabaseID sets the ID field of the mutation.
func withDatabaseID(id int) databaseOption {
	return func(m *DatabaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Database
		)
		m.oldValue = func(ctx context.Context) (*Database, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Database.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDatabase sets the old Database of the mutation.
func withDatabase(node *Database) databaseOption {
	return func(m *DatabaseMutation) {
		m.oldValue = func(context.Context) (*Database, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatabaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatabaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Database entities.
func (m *DatabaseMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatabaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatabaseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Database.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatusID sets the "status_id" field.
func (m *DatabaseMutation) SetStatusID(i int) {
	m.status_id = &i
	m.addstatus_id = nil
}

// StatusID returns the value of the "status_id" field in the mutation.
func (m *DatabaseMutation) StatusID() (r int, exists bool) {
	v := m.status_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusID returns the old "status_id" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldStatusID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusID: %w", err)
	}
	return oldValue.StatusID, nil
}

// AddStatusID adds i to the "status_id" field.
func (m *DatabaseMutation) AddStatusID(i int) {
	if m.addstatus_id != nil {
		*m.addstatus_id += i
	} else {
		m.addstatus_id = &i
	}
}

// AddedStatusID returns the value that was added to the "status_id" field in this mutation.
func (m *DatabaseMutation) AddedStatusID() (r int, exists bool) {
	v := m.addstatus_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatusID resets all changes to the "status_id" field.
func (m *DatabaseMutation) ResetStatusID() {
	m.status_id = nil
	m.addstatus_id = nil
}

// SetTagsID sets the "tags_id" field.
func (m *DatabaseMutation) SetTagsID(i int) {
	m.tags_id = &i
	m.addtags_id = nil
}

// TagsID returns the value of the "tags_id" field in the mutation.
func (m *DatabaseMutation) TagsID() (r int, exists bool) {
	v := m.tags_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTagsID returns the old "tags_id" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldTagsID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTagsID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTagsID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTagsID: %w", err)
	}
	return oldValue.TagsID, nil
}

// AddTagsID adds i to the "tags_id" field.
func (m *DatabaseMutation) AddTagsID(i int) {
	if m.addtags_id != nil {
		*m.addtags_id += i
	} else {
		m.addtags_id = &i
	}
}

// AddedTagsID returns the value that was added to the "tags_id" field in this mutation.
func (m *DatabaseMutation) AddedTagsID() (r int, exists bool) {
	v := m.addtags_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTagsID resets all changes to the "tags_id" field.
func (m *DatabaseMutation) ResetTagsID() {
	m.tags_id = nil
	m.addtags_id = nil
}

// SetCheckboxID sets the "checkbox_id" field.
func (m *DatabaseMutation) SetCheckboxID(i int) {
	m.checkbox_id = &i
	m.addcheckbox_id = nil
}

// CheckboxID returns the value of the "checkbox_id" field in the mutation.
func (m *DatabaseMutation) CheckboxID() (r int, exists bool) {
	v := m.checkbox_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckboxID returns the old "checkbox_id" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldCheckboxID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckboxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckboxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckboxID: %w", err)
	}
	return oldValue.CheckboxID, nil
}

// AddCheckboxID adds i to the "checkbox_id" field.
func (m *DatabaseMutation) AddCheckboxID(i int) {
	if m.addcheckbox_id != nil {
		*m.addcheckbox_id += i
	} else {
		m.addcheckbox_id = &i
	}
}

// AddedCheckboxID returns the value that was added to the "checkbox_id" field in this mutation.
func (m *DatabaseMutation) AddedCheckboxID() (r int, exists bool) {
	v := m.addcheckbox_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCheckboxID resets all changes to the "checkbox_id" field.
func (m *DatabaseMutation) ResetCheckboxID() {
	m.checkbox_id = nil
	m.addcheckbox_id = nil
}

// SetDbID sets the "db_id" field.
func (m *DatabaseMutation) SetDbID(s string) {
	m.db_id = &s
}

// DbID returns the value of the "db_id" field in the mutation.
func (m *DatabaseMutation) DbID() (r string, exists bool) {
	v := m.db_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDbID returns the old "db_id" field's value of the Database entity.
// If the Database object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatabaseMutation) OldDbID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDbID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDbID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDbID: %w", err)
	}
	return oldValue.DbID, nil
}

// ResetDbID resets all changes to the "db_id" field.
func (m *DatabaseMutation) ResetDbID() {
	m.db_id = nil
}

// AddStatuIDs adds the "status" edge to the Status entity by ids.
func (m *DatabaseMutation) AddStatuIDs(ids ...int) {
	if m.status == nil {
		m.status = make(map[int]struct{})
	}
	for i := range ids {
		m.status[ids[i]] = struct{}{}
	}
}

// ClearStatus clears the "status" edge to the Status entity.
func (m *DatabaseMutation) ClearStatus() {
	m.clearedstatus = true
}

// StatusCleared reports if the "status" edge to the Status entity was cleared.
func (m *DatabaseMutation) StatusCleared() bool {
	return m.clearedstatus
}

// RemoveStatuIDs removes the "status" edge to the Status entity by IDs.
func (m *DatabaseMutation) RemoveStatuIDs(ids ...int) {
	if m.removedstatus == nil {
		m.removedstatus = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.status, ids[i])
		m.removedstatus[ids[i]] = struct{}{}
	}
}

// RemovedStatus returns the removed IDs of the "status" edge to the Status entity.
func (m *DatabaseMutation) RemovedStatusIDs() (ids []int) {
	for id := range m.removedstatus {
		ids = append(ids, id)
	}
	return
}

// StatusIDs returns the "status" edge IDs in the mutation.
func (m *DatabaseMutation) StatusIDs() (ids []int) {
	for id := range m.status {
		ids = append(ids, id)
	}
	return
}

// ResetStatus resets all changes to the "status" edge.
func (m *DatabaseMutation) ResetStatus() {
	m.status = nil
	m.clearedstatus = false
	m.removedstatus = nil
}

// Where appends a list predicates to the DatabaseMutation builder.
func (m *DatabaseMutation) Where(ps ...predicate.Database) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DatabaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Database).
func (m *DatabaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatabaseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.status_id != nil {
		fields = append(fields, database.FieldStatusID)
	}
	if m.tags_id != nil {
		fields = append(fields, database.FieldTagsID)
	}
	if m.checkbox_id != nil {
		fields = append(fields, database.FieldCheckboxID)
	}
	if m.db_id != nil {
		fields = append(fields, database.FieldDbID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatabaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case database.FieldStatusID:
		return m.StatusID()
	case database.FieldTagsID:
		return m.TagsID()
	case database.FieldCheckboxID:
		return m.CheckboxID()
	case database.FieldDbID:
		return m.DbID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatabaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case database.FieldStatusID:
		return m.OldStatusID(ctx)
	case database.FieldTagsID:
		return m.OldTagsID(ctx)
	case database.FieldCheckboxID:
		return m.OldCheckboxID(ctx)
	case database.FieldDbID:
		return m.OldDbID(ctx)
	}
	return nil, fmt.Errorf("unknown Database field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatabaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case database.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusID(v)
		return nil
	case database.FieldTagsID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTagsID(v)
		return nil
	case database.FieldCheckboxID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckboxID(v)
		return nil
	case database.FieldDbID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDbID(v)
		return nil
	}
	return fmt.Errorf("unknown Database field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatabaseMutation) AddedFields() []string {
	var fields []string
	if m.addstatus_id != nil {
		fields = append(fields, database.FieldStatusID)
	}
	if m.addtags_id != nil {
		fields = append(fields, database.FieldTagsID)
	}
	if m.addcheckbox_id != nil {
		fields = append(fields, database.FieldCheckboxID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatabaseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case database.FieldStatusID:
		return m.AddedStatusID()
	case database.FieldTagsID:
		return m.AddedTagsID()
	case database.FieldCheckboxID:
		return m.AddedCheckboxID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatabaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case database.FieldStatusID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatusID(v)
		return nil
	case database.FieldTagsID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTagsID(v)
		return nil
	case database.FieldCheckboxID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCheckboxID(v)
		return nil
	}
	return fmt.Errorf("unknown Database numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatabaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatabaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatabaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Database nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatabaseMutation) ResetField(name string) error {
	switch name {
	case database.FieldStatusID:
		m.ResetStatusID()
		return nil
	case database.FieldTagsID:
		m.ResetTagsID()
		return nil
	case database.FieldCheckboxID:
		m.ResetCheckboxID()
		return nil
	case database.FieldDbID:
		m.ResetDbID()
		return nil
	}
	return fmt.Errorf("unknown Database field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatabaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.status != nil {
		edges = append(edges, database.EdgeStatus)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatabaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case database.EdgeStatus:
		ids := make([]ent.Value, 0, len(m.status))
		for id := range m.status {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatabaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatus != nil {
		edges = append(edges, database.EdgeStatus)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatabaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case database.EdgeStatus:
		ids := make([]ent.Value, 0, len(m.removedstatus))
		for id := range m.removedstatus {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatabaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstatus {
		edges = append(edges, database.EdgeStatus)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatabaseMutation) EdgeCleared(name string) bool {
	switch name {
	case database.EdgeStatus:
		return m.clearedstatus
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatabaseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Database unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatabaseMutation) ResetEdge(name string) error {
	switch name {
	case database.EdgeStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Database edge %s", name)
}

// StatusMutation represents an operation that mutates the Status nodes in the graph.
type StatusMutation struct {
	config
	op            Op
	typ           string
	id            *int
	db_id         *string
	row_id        *string
	status        *string
	saved_at      *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Status, error)
	predicates    []predicate.Status
}

var _ ent.Mutation = (*StatusMutation)(nil)

// statusOption allows management of the mutation configuration using functional options.
type statusOption func(*StatusMutation)

// newStatusMutation creates new mutation for the Status entity.
func newStatusMutation(c config, op Op, opts ...statusOption) *StatusMutation {
	m := &StatusMutation{
		config:        c,
		op:            op,
		typ:           TypeStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatusID sets the ID field of the mutation.
func withStatusID(id int) statusOption {
	return func(m *StatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Status
		)
		m.oldValue = func(ctx context.Context) (*Status, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Status.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatus sets the old Status of the mutation.
func withStatus(node *Status) statusOption {
	return func(m *StatusMutation) {
		m.oldValue = func(context.Context) (*Status, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Status entities.
func (m *StatusMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatusMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Status.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDbID sets the "db_id" field.
func (m *StatusMutation) SetDbID(s string) {
	m.db_id = &s
}

// DbID returns the value of the "db_id" field in the mutation.
func (m *StatusMutation) DbID() (r string, exists bool) {
	v := m.db_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDbID returns the old "db_id" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldDbID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDbID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDbID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDbID: %w", err)
	}
	return oldValue.DbID, nil
}

// ResetDbID resets all changes to the "db_id" field.
func (m *StatusMutation) ResetDbID() {
	m.db_id = nil
}

// SetRowID sets the "row_id" field.
func (m *StatusMutation) SetRowID(s string) {
	m.row_id = &s
}

// RowID returns the value of the "row_id" field in the mutation.
func (m *StatusMutation) RowID() (r string, exists bool) {
	v := m.row_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRowID returns the old "row_id" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldRowID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowID: %w", err)
	}
	return oldValue.RowID, nil
}

// ResetRowID resets all changes to the "row_id" field.
func (m *StatusMutation) ResetRowID() {
	m.row_id = nil
}

// SetStatus sets the "status" field.
func (m *StatusMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *StatusMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *StatusMutation) ResetStatus() {
	m.status = nil
}

// SetSavedAt sets the "saved_at" field.
func (m *StatusMutation) SetSavedAt(t time.Time) {
	m.saved_at = &t
}

// SavedAt returns the value of the "saved_at" field in the mutation.
func (m *StatusMutation) SavedAt() (r time.Time, exists bool) {
	v := m.saved_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSavedAt returns the old "saved_at" field's value of the Status entity.
// If the Status object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatusMutation) OldSavedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSavedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSavedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSavedAt: %w", err)
	}
	return oldValue.SavedAt, nil
}

// ResetSavedAt resets all changes to the "saved_at" field.
func (m *StatusMutation) ResetSavedAt() {
	m.saved_at = nil
}

// Where appends a list predicates to the StatusMutation builder.
func (m *StatusMutation) Where(ps ...predicate.Status) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Status).
func (m *StatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatusMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.db_id != nil {
		fields = append(fields, status.FieldDbID)
	}
	if m.row_id != nil {
		fields = append(fields, status.FieldRowID)
	}
	if m.status != nil {
		fields = append(fields, status.FieldStatus)
	}
	if m.saved_at != nil {
		fields = append(fields, status.FieldSavedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case status.FieldDbID:
		return m.DbID()
	case status.FieldRowID:
		return m.RowID()
	case status.FieldStatus:
		return m.Status()
	case status.FieldSavedAt:
		return m.SavedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case status.FieldDbID:
		return m.OldDbID(ctx)
	case status.FieldRowID:
		return m.OldRowID(ctx)
	case status.FieldStatus:
		return m.OldStatus(ctx)
	case status.FieldSavedAt:
		return m.OldSavedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Status field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case status.FieldDbID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDbID(v)
		return nil
	case status.FieldRowID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowID(v)
		return nil
	case status.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case status.FieldSavedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSavedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Status numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Status nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatusMutation) ResetField(name string) error {
	switch name {
	case status.FieldDbID:
		m.ResetDbID()
		return nil
	case status.FieldRowID:
		m.ResetRowID()
		return nil
	case status.FieldStatus:
		m.ResetStatus()
		return nil
	case status.FieldSavedAt:
		m.ResetSavedAt()
		return nil
	}
	return fmt.Errorf("unknown Status field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatusMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatusMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatusMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatusMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Status unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatusMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Status edge %s", name)
}
