// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostCheckhostHandlerFunc turns a function with the right signature into a post checkhost handler
type PostCheckhostHandlerFunc func(PostCheckhostParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCheckhostHandlerFunc) Handle(params PostCheckhostParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCheckhostHandler interface for that can handle valid post checkhost params
type PostCheckhostHandler interface {
	Handle(PostCheckhostParams, interface{}) middleware.Responder
}

// NewPostCheckhost creates a new http.Handler for the post checkhost operation
func NewPostCheckhost(ctx *middleware.Context, handler PostCheckhostHandler) *PostCheckhost {
	return &PostCheckhost{Context: ctx, Handler: handler}
}

/* PostCheckhost swagger:route POST /checkhost clusters postCheckhost

Check computor in inventory db with hostname

*/
type PostCheckhost struct {
	Context *middleware.Context
	Handler PostCheckhostHandler
}

func (o *PostCheckhost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCheckhostParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
